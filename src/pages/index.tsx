import productsApiRepo from "@/app/api/repositories/products.api-repo";
import { Product } from "@/app/models/Product.model";
import { SearchOutlined } from "@ant-design/icons";
import { useQuery } from "@tanstack/react-query";
import { Button, DatePicker, Input, Modal, Table } from "antd";
import { ColumnsType, TableProps } from "antd/lib/table";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
const { RangePicker } = DatePicker;

interface DataType {
  key: React.Key;
  name: string;
  code: string;
  availability: boolean;
  needing_repair: boolean;
  durability: number;
  mileage: number | null;
}

interface Props {
  initialProducts: Product[];
}

const Home: NextPage<Props> = ({ initialProducts }) => {
  const [searchQuery, setSearchQuery] = useState("");
  const [sortBy, setSorter] = useState<string | null>(null);
  const [intendedBookingProductId, setIntendedBookingProductId] = useState<
    string | null
  >(null);

  const { data: products, isFetching } = useQuery(
    ["products", searchQuery, sortBy],
    async () => {
      const data = await productsApiRepo.getProducts({
        page: 1,
        limit: 10,
        search: searchQuery,
        // @ts-ignore
        sortBy: sortBy,
      });
      return data.data?.data.contents;
    },
    { initialData: initialProducts }
  );
  const columns: ColumnsType<DataType> = [
    {
      title: "Name",
      dataIndex: "name",
      sorter: true,
    },
    {
      title: "Code",
      dataIndex: "code",
    },
    {
      title: "Availability",
      dataIndex: "availability",
      render: (availability) => (availability ? "True" : "False"),
      sorter: true,
    },
    {
      title: "Needing Repair",
      dataIndex: "needing_repair",
      sorter: true,
      render: (needing_repair) => (needing_repair ? "True" : "False"),
    },
    {
      title: "Durability",
      dataIndex: "durability",
      sorter: true,
    },
    {
      title: "Mileage",
      dataIndex: "mileage",
      sorter: true,
      render: (mileage) => (mileage ? mileage : "N/A"),
    },
    {
      title: "Action",
      render: (row) => (
        <Button onClick={() => setIntendedBookingProductId(row.key)}>
          Book
        </Button>
      ),
    },
  ];

  const onChange: TableProps<DataType>["onChange"] = (
    pagination,
    filters,
    sorter,
    extra
  ) => {
    // console.log("params", pagination, filters, sorter, extra);
    if (sorter) {
      setSorter(
        // @ts-ignore
        sorter.order === "ascend" ? `${sorter.field}` : `-${sorter.field}`
      );
    }
  };

  return (
    <div>
      <Head>
        <title>Rental App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Modal
        title="Book Product"
        open={intendedBookingProductId !== null}
        onOk={() => alert("ok")}
        onCancel={() => setIntendedBookingProductId(null)}
      >
        <h1 className="text-2xl font-semibold">
          {
            products?.find((product) => product._id == intendedBookingProductId)
              ?.name
          }
        </h1>
        <RangePicker
          onChange={(dates) => {
            const days = dates![1]?.diff(dates![0], "days");
          }}
        />
      </Modal>
      <main>
        <div className="mb-2">
          <Input
            size="large"
            placeholder="Search by product name"
            prefix={<SearchOutlined />}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        <Table
          columns={columns}
          pagination={false}
          dataSource={products?.map((product) => ({
            key: product._id,
            name: product.name,
            code: product.code,
            availability: product.availability,
            needing_repair: product.needing_repair,
            durability: product.durability,
            mileage: product.mileage,
          }))}
          onChange={onChange}
          loading={isFetching}
        />
      </main>
    </div>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const res = await productsApiRepo.getProducts({ limit: 10, page: 1 });
  return {
    props: {
      initialProducts: res.data?.data?.contents,
    },
  };
};
